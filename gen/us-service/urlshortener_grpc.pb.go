// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: urlshortener.proto

package urlShortener_microservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UrlShorteningService_ShortenUrl_FullMethodName     = "/urlSh.UrlShorteningService/ShortenUrl"
	UrlShorteningService_GetOriginalUrl_FullMethodName = "/urlSh.UrlShorteningService/GetOriginalUrl"
)

// UrlShorteningServiceClient is the client API for UrlShorteningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShorteningServiceClient interface {
	// Shortens a given original URL and returns the shortened URL.
	ShortenUrl(ctx context.Context, in *ShortenUrlRequest, opts ...grpc.CallOption) (*ShortenUrlResponse, error)
	// Retrieves the original URL for a given shortened URL.
	GetOriginalUrl(ctx context.Context, in *GetOriginalUrlRequest, opts ...grpc.CallOption) (*GetOriginalUrlResponse, error)
}

type urlShorteningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShorteningServiceClient(cc grpc.ClientConnInterface) UrlShorteningServiceClient {
	return &urlShorteningServiceClient{cc}
}

func (c *urlShorteningServiceClient) ShortenUrl(ctx context.Context, in *ShortenUrlRequest, opts ...grpc.CallOption) (*ShortenUrlResponse, error) {
	out := new(ShortenUrlResponse)
	err := c.cc.Invoke(ctx, UrlShorteningService_ShortenUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShorteningServiceClient) GetOriginalUrl(ctx context.Context, in *GetOriginalUrlRequest, opts ...grpc.CallOption) (*GetOriginalUrlResponse, error) {
	out := new(GetOriginalUrlResponse)
	err := c.cc.Invoke(ctx, UrlShorteningService_GetOriginalUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShorteningServiceServer is the server API for UrlShorteningService service.
// All implementations must embed UnimplementedUrlShorteningServiceServer
// for forward compatibility
type UrlShorteningServiceServer interface {
	// Shortens a given original URL and returns the shortened URL.
	ShortenUrl(context.Context, *ShortenUrlRequest) (*ShortenUrlResponse, error)
	// Retrieves the original URL for a given shortened URL.
	GetOriginalUrl(context.Context, *GetOriginalUrlRequest) (*GetOriginalUrlResponse, error)
	mustEmbedUnimplementedUrlShorteningServiceServer()
}

// UnimplementedUrlShorteningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShorteningServiceServer struct {
}

func (UnimplementedUrlShorteningServiceServer) ShortenUrl(context.Context, *ShortenUrlRequest) (*ShortenUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenUrl not implemented")
}
func (UnimplementedUrlShorteningServiceServer) GetOriginalUrl(context.Context, *GetOriginalUrlRequest) (*GetOriginalUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalUrl not implemented")
}
func (UnimplementedUrlShorteningServiceServer) mustEmbedUnimplementedUrlShorteningServiceServer() {}

// UnsafeUrlShorteningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShorteningServiceServer will
// result in compilation errors.
type UnsafeUrlShorteningServiceServer interface {
	mustEmbedUnimplementedUrlShorteningServiceServer()
}

func RegisterUrlShorteningServiceServer(s grpc.ServiceRegistrar, srv UrlShorteningServiceServer) {
	s.RegisterService(&UrlShorteningService_ServiceDesc, srv)
}

func _UrlShorteningService_ShortenUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShorteningServiceServer).ShortenUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShorteningService_ShortenUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShorteningServiceServer).ShortenUrl(ctx, req.(*ShortenUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShorteningService_GetOriginalUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShorteningServiceServer).GetOriginalUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShorteningService_GetOriginalUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShorteningServiceServer).GetOriginalUrl(ctx, req.(*GetOriginalUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShorteningService_ServiceDesc is the grpc.ServiceDesc for UrlShorteningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShorteningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlSh.UrlShorteningService",
	HandlerType: (*UrlShorteningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenUrl",
			Handler:    _UrlShorteningService_ShortenUrl_Handler,
		},
		{
			MethodName: "GetOriginalUrl",
			Handler:    _UrlShorteningService_GetOriginalUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urlshortener.proto",
}
